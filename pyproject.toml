[tool.poetry]
name = "websockettest"
version = "0.0.1"
description = ""
authors = ["Pavel Krasnobaev <mrfierydruid@yandex.ru>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.95.0"
websockets = "^11.0"
uvicorn = "^0.21.1"
pydantic = "^1.10.7"
aiohttp = "^3.8.4"

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.261"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 120
select = ["ALL"]

ignore = [
    # [docstrings]
    # Ignore google docstring format
    "D",

    # [flake8-annotations]
    # Missing type annotation for self in method
    "ANN101",
    # Missing type annotation for cls in classmethod
    "ANN102",
    # Missing type annotation for args
    "ANN002",
    # Missing type annotation for kwargs
    "ANN003",
    # Missing type annotation for special method "__init__()"
    "ANN204",
    # Dynamicly typed expressions (typing.Any) are disallowed in object constructor
    "ANN401",

    # [flake8-isort]
    # Ignore import in the wrong position
    "I001",

    # [flake8-bandit]
    # Ignore hardcoded password
    "S105",

    # Ignore raise from raise
    "B904",

    # Do not perform function call `Depends` in argument defaults
    "B008",

    # Ignore catch Exception
    "BLE001",

    # Ignore string/docstring/comment contains unicode character
    "RUF001",
    "RUF002",
    "RUF003",

    # Assign string to variable before exception
    "EM",
    # Use ternar operator instread of if-else statement
    "SIM108",

    # Use a regulare assert insteadof unittest-style
    "PT009",

    # Trailing comma in lists
    "COM812",

    # [flake8-raise]
    # unnecessary parentheses on raised exception
    "RSE102",

    # [tryceratops]
    # Avoid specifying long messages outside the exception class
    "TRY003",

    # Logging statement uses f-string
    "G004",

    "S104",
]

exclude = [
    ".direnv",
    ".eggs",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    "__pypackages__",
    "__pycache__",
    "_build",
    "buck-out",
    "build",
    "dist",

    ".idea",
    "venv",
    ".venv",
    ".git",
    "__pycache__",
]

target-version = "py310"

[tool.ruff.per-file-ignores]
"*/__init__.py" = [
    # Imported but unused
    "F401"
]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.isort]
combine-as-imports = true

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod"
]

[tool.ruff.mccabe]
max-complexity = 18

[tool.ruff.flake8-annotations]
suppress-dummy-args = true
